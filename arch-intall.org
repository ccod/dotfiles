#+TITLE: arch-intall

* Introduction
Most of what I am describing is detailed here: [[https://wiki.archlinux.org/index.php/installation_guide][Arch Install]]
These are basically notes on what I did to achieve the system I wanted.
The priority in this instruction set is to get a system you can boot up into
first before handling user space setup.

* Initial Check
- There is a step for loading the correct keyboard, but the default works for me
- Check internet connection is working
  #+BEGIN_SRC bash
  ping google.com
  #+END_SRC
- set the clock
  #+BEGIN_SRC bash
  timedatectl set-ntp true
  #+END_SRC
- if you arn't sure if you need an efi boot setup (machines I am looking at do)
  #+BEGIN_SRC bash
  ls /sys/firmware/efi/efivars
  #+END_SRC

* Settup Disk
** Sysemdb-boot disk setup (for EFI)
- lsblk: Identify your hard drive
- fdisk /dev/sd{letter}
  - d: delete a few times to delete current partitions
  - n: add a new partition

    defaults are fine choosing drive number and starting memory location.
    defining drive size looks like this "+512M"

    #+BEGIN_SRC bash
        1 +512M boot EFI System Partition
        2 +4G   swap Linux Swap
        3 rest  root Linux (enter to take remaining)
    #+END_SRC

  - t: set the partition types
    (L lists them, but they seem to be different on different machines)

- format partitions
  #+BEGIN_SRC bash
    mkfs.vfat -F32 /dev/sd{letter}1
    mkswap /dev/sd{letter}2
    mkfs.ext4 /dev/sd{letter}3

    swapon
  #+END_SRC
- mount your partitions
  #+BEGIN_SRC bash
    mount  /dev/sd{letter}3 /mnt
    mkdir  /mnt/boot
    mount  /dev/sd{letter}1 /mnt/boot
  #+END_SRC

* Bootstrap
#+BEGIN_SRC bash
    pacstrap /mnt base base-devel linux linux-firmware neovim dhcpcd

    genfstab -U /mnt >> /mnt/etc/fstab
    arch-chroot /mnt
#+END_SRC
* BootLoader Notes
** Systemd-boot
use systemd-boot to take care of this step
you can find the documentation here: [[https://https://wiki.archlinux.org/index.php/Systemd-boot][systemd-boot]]

#+BEGIN_SRC bash
    bootctl --path=/boot install
#+END_SRC
make these changes to the boot directory:
touch /boot/loader/loader.conf /boot/loader/entries/arch.conf
what it should look like: [[./loader.conf][loader.conf]] [[./arch.conf][arch.conf]]

to get UUID into arch-conf
#+BEGIN_SRC bash
    awk '/sd{letter}3/{getline; print $0}' /etc/fstab >> /boot/loader/entries/arch.conf
#+END_SRC
use nvim to insert the UUID where the indicated curly braces are in arch.conf example

TODO: remember plymouth configuration

* Prepping To Verify Bootloader
Try to handle this as early as possible.
better to have the early success of working from
Arch, and smoke testing any early issues

#+BEGIN_SRC bash
    passwd                     ## set root password
    systemctl enable dhcpcd    ## keep ethernet connection
    exit                       ## need to chroot out before reboot
    reboot
#+END_SRC

If everything worked out alright, it should drop you into a login prompt.
#+BEGIN_SRC bash
    username: root
    password: {root passwd entered in the previous step}
#+END_SRC

* Initial Config
#+BEGIN_SRC bash
    nvim /etc/locale.gen # uncomment en_US.UFT-8 UTF8
    echo LANG=en_US.UTF-8 >> /etc/locale.conf
    locale-gen
    echo DevBox >> /etc/hostname
    ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
## might be different for you, but I am east coast US
#+END_SRC

* User setup
TODO: add sudo pacman
run commands:
#+BEGIN_SRC bash
    pacman -S sudo
    useradd -m {username}
    passwd {username}
    usermod -aG wheel,audio,video,optical,storage {username}
    EDITOR=nvim visudo ## scroll down and uncomment wheel permissions
#+END_SRC

* User space install
logout and login as user
#+BEGIN_SRC bash
    logout
    {...login as user}
    sudo pacman -S git
    git clone https://github.com/ccod/dotfiles.git
    cd dotfiles/install-scripts
    ./main-install
    ./aur-install
    ./emacs-config-install

    # script should have enabled docker daemon on startup
    # now you just need to add docker to your user's groups
    sudo usermod -aG docker {username}
    # hopefully everything installed correctly
    reboot
#+END_SRC

** bspwm install (only one, currently)
Note:
  - remember to chmod +x bspwmrc and remaps
  - xprop is a useful command in bspwm
  - workspaces are saved here: ~/.emacs.d/.local/etc/workspaces/_workspaces

TODO:
  - install: javascript rust clojure sbscl go ruby (rbenv)
  - also: docker aws-cli
  - sort out how to use mermaidjs (text to graphic)

  #+BEGIN_SRC bash
    krita (maybe Gimp)
    blender
    yay -S discord
    yay -S slack
    yay -S spotify
    yay -S lemonbar-xft-git
  #+END_SRC
